// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/tensors.proto

#include "proto/tensors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR NumTensor::NumTensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.my_arrays_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NumTensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumTensorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumTensorDefaultTypeInternal() {}
  union {
    NumTensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumTensorDefaultTypeInternal _NumTensor_default_instance_;
PROTOBUF_CONSTEXPR NumMatrix::NumMatrix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.my_sub_arrays_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NumMatrixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumMatrixDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumMatrixDefaultTypeInternal() {}
  union {
    NumMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumMatrixDefaultTypeInternal _NumMatrix_default_instance_;
PROTOBUF_CONSTEXPR NumRow::NumRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.my_array_)*/{}
  , /*decltype(_impl_._my_array_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NumRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumRowDefaultTypeInternal() {}
  union {
    NumRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumRowDefaultTypeInternal _NumRow_default_instance_;
static ::_pb::Metadata file_level_metadata_proto_2ftensors_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2ftensors_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2ftensors_2eproto = nullptr;

const uint32_t TableStruct_proto_2ftensors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NumTensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::NumTensor, _impl_.my_arrays_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NumMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::NumMatrix, _impl_.my_sub_arrays_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NumRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::NumRow, _impl_.my_array_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::NumTensor)},
  { 9, -1, -1, sizeof(::NumMatrix)},
  { 18, -1, -1, sizeof(::NumRow)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_NumTensor_default_instance_._instance,
  &::_NumMatrix_default_instance_._instance,
  &::_NumRow_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2ftensors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023proto/tensors.proto\"*\n\tNumTensor\022\035\n\tmy"
  "_arrays\030\001 \003(\0132\n.NumMatrix\"+\n\tNumMatrix\022\036"
  "\n\rmy_sub_arrays\030\001 \003(\0132\007.NumRow\"\036\n\006NumRow"
  "\022\024\n\010my_array\030\001 \003(\005B\002\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2ftensors_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2ftensors_2eproto = {
    false, false, 150, descriptor_table_protodef_proto_2ftensors_2eproto,
    "proto/tensors.proto",
    &descriptor_table_proto_2ftensors_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_proto_2ftensors_2eproto::offsets,
    file_level_metadata_proto_2ftensors_2eproto, file_level_enum_descriptors_proto_2ftensors_2eproto,
    file_level_service_descriptors_proto_2ftensors_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2ftensors_2eproto_getter() {
  return &descriptor_table_proto_2ftensors_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2ftensors_2eproto(&descriptor_table_proto_2ftensors_2eproto);

// ===================================================================

class NumTensor::_Internal {
 public:
};

NumTensor::NumTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NumTensor)
}
NumTensor::NumTensor(const NumTensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NumTensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.my_arrays_){from._impl_.my_arrays_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NumTensor)
}

inline void NumTensor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.my_arrays_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NumTensor::~NumTensor() {
  // @@protoc_insertion_point(destructor:NumTensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NumTensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_arrays_.~RepeatedPtrField();
}

void NumTensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NumTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:NumTensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_arrays_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumTensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .NumMatrix my_arrays = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_my_arrays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumTensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NumTensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NumMatrix my_arrays = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_my_arrays_size()); i < n; i++) {
    const auto& repfield = this->_internal_my_arrays(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NumTensor)
  return target;
}

size_t NumTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NumTensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NumMatrix my_arrays = 1;
  total_size += 1UL * this->_internal_my_arrays_size();
  for (const auto& msg : this->_impl_.my_arrays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumTensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NumTensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumTensor::GetClassData() const { return &_class_data_; }


void NumTensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NumTensor*>(&to_msg);
  auto& from = static_cast<const NumTensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NumTensor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.my_arrays_.MergeFrom(from._impl_.my_arrays_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumTensor::CopyFrom(const NumTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NumTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumTensor::IsInitialized() const {
  return true;
}

void NumTensor::InternalSwap(NumTensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.my_arrays_.InternalSwap(&other->_impl_.my_arrays_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumTensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ftensors_2eproto_getter, &descriptor_table_proto_2ftensors_2eproto_once,
      file_level_metadata_proto_2ftensors_2eproto[0]);
}

// ===================================================================

class NumMatrix::_Internal {
 public:
};

NumMatrix::NumMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NumMatrix)
}
NumMatrix::NumMatrix(const NumMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NumMatrix* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.my_sub_arrays_){from._impl_.my_sub_arrays_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NumMatrix)
}

inline void NumMatrix::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.my_sub_arrays_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NumMatrix::~NumMatrix() {
  // @@protoc_insertion_point(destructor:NumMatrix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NumMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_sub_arrays_.~RepeatedPtrField();
}

void NumMatrix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NumMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:NumMatrix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_sub_arrays_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumMatrix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .NumRow my_sub_arrays = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_my_sub_arrays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumMatrix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NumMatrix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NumRow my_sub_arrays = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_my_sub_arrays_size()); i < n; i++) {
    const auto& repfield = this->_internal_my_sub_arrays(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NumMatrix)
  return target;
}

size_t NumMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NumMatrix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NumRow my_sub_arrays = 1;
  total_size += 1UL * this->_internal_my_sub_arrays_size();
  for (const auto& msg : this->_impl_.my_sub_arrays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NumMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumMatrix::GetClassData() const { return &_class_data_; }


void NumMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NumMatrix*>(&to_msg);
  auto& from = static_cast<const NumMatrix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NumMatrix)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.my_sub_arrays_.MergeFrom(from._impl_.my_sub_arrays_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumMatrix::CopyFrom(const NumMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NumMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumMatrix::IsInitialized() const {
  return true;
}

void NumMatrix::InternalSwap(NumMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.my_sub_arrays_.InternalSwap(&other->_impl_.my_sub_arrays_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumMatrix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ftensors_2eproto_getter, &descriptor_table_proto_2ftensors_2eproto_once,
      file_level_metadata_proto_2ftensors_2eproto[1]);
}

// ===================================================================

class NumRow::_Internal {
 public:
};

NumRow::NumRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NumRow)
}
NumRow::NumRow(const NumRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NumRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.my_array_){from._impl_.my_array_}
    , /*decltype(_impl_._my_array_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NumRow)
}

inline void NumRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.my_array_){arena}
    , /*decltype(_impl_._my_array_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NumRow::~NumRow() {
  // @@protoc_insertion_point(destructor:NumRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NumRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_array_.~RepeatedField();
}

void NumRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NumRow::Clear() {
// @@protoc_insertion_point(message_clear_start:NumRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_array_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 my_array = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_my_array(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_my_array(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NumRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 my_array = 1 [packed = true];
  {
    int byte_size = _impl_._my_array_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_my_array(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NumRow)
  return target;
}

size_t NumRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NumRow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 my_array = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.my_array_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._my_array_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NumRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumRow::GetClassData() const { return &_class_data_; }


void NumRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NumRow*>(&to_msg);
  auto& from = static_cast<const NumRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NumRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.my_array_.MergeFrom(from._impl_.my_array_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumRow::CopyFrom(const NumRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NumRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumRow::IsInitialized() const {
  return true;
}

void NumRow::InternalSwap(NumRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.my_array_.InternalSwap(&other->_impl_.my_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ftensors_2eproto_getter, &descriptor_table_proto_2ftensors_2eproto_once,
      file_level_metadata_proto_2ftensors_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NumTensor*
Arena::CreateMaybeMessage< ::NumTensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NumTensor >(arena);
}
template<> PROTOBUF_NOINLINE ::NumMatrix*
Arena::CreateMaybeMessage< ::NumMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NumMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::NumRow*
Arena::CreateMaybeMessage< ::NumRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NumRow >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/tensors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ftensors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ftensors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ftensors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ftensors_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftensors_2eproto;
class NumMatrix;
struct NumMatrixDefaultTypeInternal;
extern NumMatrixDefaultTypeInternal _NumMatrix_default_instance_;
class NumRow;
struct NumRowDefaultTypeInternal;
extern NumRowDefaultTypeInternal _NumRow_default_instance_;
class NumTensor;
struct NumTensorDefaultTypeInternal;
extern NumTensorDefaultTypeInternal _NumTensor_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NumMatrix* Arena::CreateMaybeMessage<::NumMatrix>(Arena*);
template<> ::NumRow* Arena::CreateMaybeMessage<::NumRow>(Arena*);
template<> ::NumTensor* Arena::CreateMaybeMessage<::NumTensor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class NumTensor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NumTensor) */ {
 public:
  inline NumTensor() : NumTensor(nullptr) {}
  ~NumTensor() override;
  explicit PROTOBUF_CONSTEXPR NumTensor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumTensor(const NumTensor& from);
  NumTensor(NumTensor&& from) noexcept
    : NumTensor() {
    *this = ::std::move(from);
  }

  inline NumTensor& operator=(const NumTensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumTensor& operator=(NumTensor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumTensor& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumTensor* internal_default_instance() {
    return reinterpret_cast<const NumTensor*>(
               &_NumTensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NumTensor& a, NumTensor& b) {
    a.Swap(&b);
  }
  inline void Swap(NumTensor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumTensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumTensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NumTensor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NumTensor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NumTensor& from) {
    NumTensor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumTensor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NumTensor";
  }
  protected:
  explicit NumTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyArraysFieldNumber = 1,
  };
  // repeated .NumMatrix my_arrays = 1;
  int my_arrays_size() const;
  private:
  int _internal_my_arrays_size() const;
  public:
  void clear_my_arrays();
  ::NumMatrix* mutable_my_arrays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NumMatrix >*
      mutable_my_arrays();
  private:
  const ::NumMatrix& _internal_my_arrays(int index) const;
  ::NumMatrix* _internal_add_my_arrays();
  public:
  const ::NumMatrix& my_arrays(int index) const;
  ::NumMatrix* add_my_arrays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NumMatrix >&
      my_arrays() const;

  // @@protoc_insertion_point(class_scope:NumTensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NumMatrix > my_arrays_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ftensors_2eproto;
};
// -------------------------------------------------------------------

class NumMatrix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NumMatrix) */ {
 public:
  inline NumMatrix() : NumMatrix(nullptr) {}
  ~NumMatrix() override;
  explicit PROTOBUF_CONSTEXPR NumMatrix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumMatrix(const NumMatrix& from);
  NumMatrix(NumMatrix&& from) noexcept
    : NumMatrix() {
    *this = ::std::move(from);
  }

  inline NumMatrix& operator=(const NumMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumMatrix& operator=(NumMatrix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumMatrix& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumMatrix* internal_default_instance() {
    return reinterpret_cast<const NumMatrix*>(
               &_NumMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NumMatrix& a, NumMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(NumMatrix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NumMatrix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NumMatrix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NumMatrix& from) {
    NumMatrix::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumMatrix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NumMatrix";
  }
  protected:
  explicit NumMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMySubArraysFieldNumber = 1,
  };
  // repeated .NumRow my_sub_arrays = 1;
  int my_sub_arrays_size() const;
  private:
  int _internal_my_sub_arrays_size() const;
  public:
  void clear_my_sub_arrays();
  ::NumRow* mutable_my_sub_arrays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NumRow >*
      mutable_my_sub_arrays();
  private:
  const ::NumRow& _internal_my_sub_arrays(int index) const;
  ::NumRow* _internal_add_my_sub_arrays();
  public:
  const ::NumRow& my_sub_arrays(int index) const;
  ::NumRow* add_my_sub_arrays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NumRow >&
      my_sub_arrays() const;

  // @@protoc_insertion_point(class_scope:NumMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NumRow > my_sub_arrays_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ftensors_2eproto;
};
// -------------------------------------------------------------------

class NumRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NumRow) */ {
 public:
  inline NumRow() : NumRow(nullptr) {}
  ~NumRow() override;
  explicit PROTOBUF_CONSTEXPR NumRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumRow(const NumRow& from);
  NumRow(NumRow&& from) noexcept
    : NumRow() {
    *this = ::std::move(from);
  }

  inline NumRow& operator=(const NumRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumRow& operator=(NumRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumRow* internal_default_instance() {
    return reinterpret_cast<const NumRow*>(
               &_NumRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NumRow& a, NumRow& b) {
    a.Swap(&b);
  }
  inline void Swap(NumRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NumRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NumRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NumRow& from) {
    NumRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NumRow";
  }
  protected:
  explicit NumRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyArrayFieldNumber = 1,
  };
  // repeated int32 my_array = 1 [packed = true];
  int my_array_size() const;
  private:
  int _internal_my_array_size() const;
  public:
  void clear_my_array();
  private:
  int32_t _internal_my_array(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_my_array() const;
  void _internal_add_my_array(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_my_array();
  public:
  int32_t my_array(int index) const;
  void set_my_array(int index, int32_t value);
  void add_my_array(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      my_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_my_array();

  // @@protoc_insertion_point(class_scope:NumRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > my_array_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _my_array_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ftensors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NumTensor

// repeated .NumMatrix my_arrays = 1;
inline int NumTensor::_internal_my_arrays_size() const {
  return _impl_.my_arrays_.size();
}
inline int NumTensor::my_arrays_size() const {
  return _internal_my_arrays_size();
}
inline void NumTensor::clear_my_arrays() {
  _impl_.my_arrays_.Clear();
}
inline ::NumMatrix* NumTensor::mutable_my_arrays(int index) {
  // @@protoc_insertion_point(field_mutable:NumTensor.my_arrays)
  return _impl_.my_arrays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NumMatrix >*
NumTensor::mutable_my_arrays() {
  // @@protoc_insertion_point(field_mutable_list:NumTensor.my_arrays)
  return &_impl_.my_arrays_;
}
inline const ::NumMatrix& NumTensor::_internal_my_arrays(int index) const {
  return _impl_.my_arrays_.Get(index);
}
inline const ::NumMatrix& NumTensor::my_arrays(int index) const {
  // @@protoc_insertion_point(field_get:NumTensor.my_arrays)
  return _internal_my_arrays(index);
}
inline ::NumMatrix* NumTensor::_internal_add_my_arrays() {
  return _impl_.my_arrays_.Add();
}
inline ::NumMatrix* NumTensor::add_my_arrays() {
  ::NumMatrix* _add = _internal_add_my_arrays();
  // @@protoc_insertion_point(field_add:NumTensor.my_arrays)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NumMatrix >&
NumTensor::my_arrays() const {
  // @@protoc_insertion_point(field_list:NumTensor.my_arrays)
  return _impl_.my_arrays_;
}

// -------------------------------------------------------------------

// NumMatrix

// repeated .NumRow my_sub_arrays = 1;
inline int NumMatrix::_internal_my_sub_arrays_size() const {
  return _impl_.my_sub_arrays_.size();
}
inline int NumMatrix::my_sub_arrays_size() const {
  return _internal_my_sub_arrays_size();
}
inline void NumMatrix::clear_my_sub_arrays() {
  _impl_.my_sub_arrays_.Clear();
}
inline ::NumRow* NumMatrix::mutable_my_sub_arrays(int index) {
  // @@protoc_insertion_point(field_mutable:NumMatrix.my_sub_arrays)
  return _impl_.my_sub_arrays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NumRow >*
NumMatrix::mutable_my_sub_arrays() {
  // @@protoc_insertion_point(field_mutable_list:NumMatrix.my_sub_arrays)
  return &_impl_.my_sub_arrays_;
}
inline const ::NumRow& NumMatrix::_internal_my_sub_arrays(int index) const {
  return _impl_.my_sub_arrays_.Get(index);
}
inline const ::NumRow& NumMatrix::my_sub_arrays(int index) const {
  // @@protoc_insertion_point(field_get:NumMatrix.my_sub_arrays)
  return _internal_my_sub_arrays(index);
}
inline ::NumRow* NumMatrix::_internal_add_my_sub_arrays() {
  return _impl_.my_sub_arrays_.Add();
}
inline ::NumRow* NumMatrix::add_my_sub_arrays() {
  ::NumRow* _add = _internal_add_my_sub_arrays();
  // @@protoc_insertion_point(field_add:NumMatrix.my_sub_arrays)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NumRow >&
NumMatrix::my_sub_arrays() const {
  // @@protoc_insertion_point(field_list:NumMatrix.my_sub_arrays)
  return _impl_.my_sub_arrays_;
}

// -------------------------------------------------------------------

// NumRow

// repeated int32 my_array = 1 [packed = true];
inline int NumRow::_internal_my_array_size() const {
  return _impl_.my_array_.size();
}
inline int NumRow::my_array_size() const {
  return _internal_my_array_size();
}
inline void NumRow::clear_my_array() {
  _impl_.my_array_.Clear();
}
inline int32_t NumRow::_internal_my_array(int index) const {
  return _impl_.my_array_.Get(index);
}
inline int32_t NumRow::my_array(int index) const {
  // @@protoc_insertion_point(field_get:NumRow.my_array)
  return _internal_my_array(index);
}
inline void NumRow::set_my_array(int index, int32_t value) {
  _impl_.my_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:NumRow.my_array)
}
inline void NumRow::_internal_add_my_array(int32_t value) {
  _impl_.my_array_.Add(value);
}
inline void NumRow::add_my_array(int32_t value) {
  _internal_add_my_array(value);
  // @@protoc_insertion_point(field_add:NumRow.my_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NumRow::_internal_my_array() const {
  return _impl_.my_array_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NumRow::my_array() const {
  // @@protoc_insertion_point(field_list:NumRow.my_array)
  return _internal_my_array();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NumRow::_internal_mutable_my_array() {
  return &_impl_.my_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NumRow::mutable_my_array() {
  // @@protoc_insertion_point(field_mutable_list:NumRow.my_array)
  return _internal_mutable_my_array();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ftensors_2eproto
